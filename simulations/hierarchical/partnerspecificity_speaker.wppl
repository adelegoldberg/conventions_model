// run using, e.g.:
// webppl partnerspecificity.wppl --require ./refModule/ --require webppl-csv

var numUtterances = 4;
var numStates = 2;
var lexDims = [numUtterances, numStates];

var primitiveUtterances = map(function(i) {return 'word' + i;}, _.range(1, numUtterances+1));
var states = map(function(i) {return 'object' + i;}, _.range(1, numStates+1));

var params = {
  alpha : 5,
  costWeight:0.5,
  context: ['object1', 'object2'],
  primitiveUtterances: primitiveUtterances,
  states : states,
  utterances : (map(function(l) {return l.join('_')}, refModule.k_combinations(primitiveUtterances, 2))
                .concat(primitiveUtterances))
};

var biasedPrior = T.mul(Tensor(lexDims, [1, -1, 1, -1, -1, 1, -1, 1]), 1);

var tensorSoftplus = function(x) {
  return T.log(T.add(T.exp(x), 1));
};

var partnerGuide = function(paramName) {
  return function() {
    return DiagCovGaussian({
      mu: param({name: 'mu' + paramName, dims: lexDims, init: function(dims) {return biasedPrior}}),
      sigma: tensorSoftplus(param({name: 'sigma' + paramName, dims: lexDims}))
    });
  };
};

var sampleLexicon = function(i) {
  var hyperLex = sample(DiagCovGaussian({mu: zeros(lexDims), sigma: T.mul(ones(lexDims), 1)}),
			{guide: partnerGuide('hyper')});
  return sample(DiagCovGaussian({mu: hyperLex, sigma: T.mul(ones(lexDims), 1)}),
		{guide: partnerGuide(i)});
};

// listener marginalizing over lexicons ("guide: true" samples from posterior instead of prior)
var L1_uncertain = function(state, utt, partnerID) {
  return expectation(Infer({method:"forward", samples: 10000, guide:true}, function(){
    var lexicon = sampleLexicon(partnerID);
    return Math.exp(refModule.getListenerScore(state, utt, extend(params, {lexicon: lexicon})));
  }));
};

var S = function(state, partnerID) {
  return Infer({method: "enumerate"}, function() {
    var utt = uniformDraw(params.utterances);
    var informativity = L1_uncertain(state, utt, partnerID);
    display(utt)
    display(informativity);
    factor(params.alpha * Math.log(informativity) -
           params.costWeight * utt.split('_').length);
    return utt;
  });
};
var observeRound = function(llex, datum) {
  display(llex)
  console.log(refModule.getListenerScore(
    datum.clickedName, datum.wordID, extend({}, params, {lexicon: llex})
  ));
  factor(refModule.getListenerScore(
    datum.clickedName, datum.wordID, extend({}, params, {lexicon: llex})
  ));
};

// for each point in data, we want the model's predictions 
var iterate = function(outputFile, data) {
  return map(function(t) {
    // grab data up to this point
    var dataSoFar = data.slice(0,t);
    // run VI on current data
    if(!_.isEmpty(dataSoFar)) {
      Optimize({
        steps: 100000, verbose: true, optMethod: {adam: {stepSize: 0.00000001}},
        model: function() {
	  var lexica = {1 : sampleLexicon(1),
		        2 : sampleLexicon(2),
		        3 : sampleLexicon(3),
		        4 : sampleLexicon(4)};
	  mapData({data: dataSoFar}, function(trialDatum) {
	    var i = trialDatum.partnerID;
	    var lexicon = lexica[i];
	    observeRound(lexicon, trialDatum);
	  });
        }
      });
    }
    // get marginal prediction of next data point over lexicon posterior
    var nextDataPoint = data[t];
    var predictions = S(nextDataPoint.target, nextDataPoint.partnerID);
    console.log(JSON.stringify(predictions));
//    csv.writeLine([t, nextDataPoint.partnerID, prediction].join(','), outputFile);
  }, _.range(data.length ));
};

var data = [{partnerID: 1, target: 'object1', clickedName: 'object1', wordID: 'word1_word2'},
	    {partnerID: 1, target: 'object1', clickedName: 'object1', wordID: 'word1_word2'},
	    {partnerID: 1, target: 'object1', clickedName: 'object1', wordID: 'word1_word2'},
	    // {partnerID: 2, target: 'object1', clickedName: 'object1', wordID: 'word1'},
	    // {partnerID: 2, target: 'object1', clickedName: 'object1', wordID: 'word1'},
	    // {partnerID: 2, target: 'object1', clickedName: 'object1', wordID: 'word1'},
	    // {partnerID: 3, target: 'object1', clickedName: 'object1', wordID: 'word1'},
	    // {partnerID: 3, target: 'object1', clickedName: 'object1', wordID: 'word1'},
	    // {partnerID: 3, target: 'object1', clickedName: 'object1', wordID: 'word1'},
	    //{partnerID: 4, target: 'object1', clickedName: 'object1', wordID: 'word1'}
           ];

var f = csv.open('speakerOutput.csv');
csv.writeLine('time,partnerID,prediction',f);
iterate(f, data);
csv.close(f);
